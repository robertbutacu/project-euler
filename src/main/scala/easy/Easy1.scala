package easy

import scala.annotation.tailrec
import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContext, Future}
import ExecutionContext.Implicits.global
import scala.math.BigDecimal

object Easy1 extends App {
  /*
  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

  Find the sum of all the multiples of 3 or 5 below 1000.
   */

  def sum(): Int = (0 until 1000).filter(i => i % 3 == 0 || i % 5 == 0).sum


  /*
  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
   */

  def fibonacciSequence(): Stream[Int] = 1 #:: 2 #:: fibonacciSequence().zip(fibonacciSequence().tail).map(p => p._1 + p._2)

  /*
  The following iterative sequence is defined for the set of positive integers:

  n → n/2 (n is even)
  n → 3n + 1 (n is odd)

  Using the rule above and starting with 13, we generate the following sequence:

  13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
  It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

  Which starting number, under one million, produces the longest chain?

  NOTE: Once the chain starts the terms are allowed to go above one million.
  */

  def applyFormula(input: BigDecimal): BigDecimal = {
    (input % 2).toInt match {
      case 0 => input / 2
      case 1 => 3 * input + 1
    }
  }

  def getChain(input: BigDecimal): Future[BigDecimal] = {
    @tailrec
    def go(current: BigDecimal, chainLength: BigDecimal = 0): BigDecimal = {
      if(current == BigDecimal(1)) chainLength
      else go(applyFormula(current), chainLength + 1)
    }

    Future {
      println(s"Starting from thread ${Thread.currentThread}")
      println(s"Current numbe3r is $input")
      go(input)
    }
  }


  def findMax: Future[List[BigDecimal]] = {
    for {
      values <- Future(Range.BigDecimal.inclusive(1000000.0, 1.0, -1.0).toList)
      chains <- Future.traverse(values)(e => getChain(e).recover{case e: Exception => println(s"Found exception $e"); BigDecimal(0)})
    } yield chains
  }

  println(Await.result(findMax, Duration.Inf).max)
}
